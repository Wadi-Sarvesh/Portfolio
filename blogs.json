{"status":"ok","feed":{"url":"https://medium.com/feed/@wadisarvesh33","title":"Stories by Wadisarvesh on Medium","link":"https://medium.com/@wadisarvesh33?source=rss-96206eeb13c5------2","author":"","description":"Stories by Wadisarvesh on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/0*Rj6x-d_Lm2SA_ZMX"},"items":[{"title":"Google Meet Self Attendance Bot ~Sarvesh Wadi","pubDate":"2021-08-08 22:30:59","link":"https://medium.com/analytics-vidhya/google-meet-self-attendance-bot-sarvesh-wadi-a62978bb06f6?source=rss-96206eeb13c5------2","guid":"https://medium.com/p/a62978bb06f6","author":"Wadisarvesh","thumbnail":"https://cdn-images-1.medium.com/max/1024/0*3SE2pe1oF1EMzVS-.png","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*3SE2pe1oF1EMzVS-.png\"></figure><p>I have been missing my morning online lectures lately because of this irregular sleep cycle and procrastination. So I came up with this innovative idea of developing a python program that will automatically open the meet link for me and join the lecture using my account credentials.</p>\n<p>Moreover, I added a versatile feature to this project, making this project totally self-acting in handling the Google Meetings web page. I have developed a program that will answer as \u201cPresent\u201d through the Microphone of the laptop whenever the teacher takes your name. Pygame, selenium and chrome driver are used in this project. In this tutorial, I\u2018ll walk you through the project step by step to create your own Google Meet Attendance bot.</p>\n<p>Step 1: Installing required Softwares</p>\n<p>Run the following commands on your command prompt to install selenium and\u00a0pygame.</p>\n<pre>pip install selenium</pre>\n<pre>pip install pygame==2.0.0.dev8</pre>\n<p>Selenium supports all major browsers on the market such as Chromium, Firefox, Internet Explorer, Opera, and Safari. WebDriver aims to emulate a real user\u2019s interaction with the browser as closely as possible. This is possible at varying levels in different browsers. Pygame is used to play and process mp3\u00a0files.</p>\n<p>In this project, I have used Chrome Driver as the WebDriver to automate tasks that are to be performed on\u00a0Chrome.</p>\n<p>Download the latest chromedriver that matches with your version of\u00a0chrome.</p>\n<p><a href=\"https://chromedriver.chromium.org/downloads\">https://chromedriver.chromium.org/downloads</a></p>\n<p>If you\u2019re using firefox, Microsoft edge or any other application, you can download driver for your application accordingly</p>\n<p>Step 2: Writing Python code for web automation.</p>\n<p><strong>Note: The indentations provided in the snippets are improper. You can refer to the link for the GitHub repo at the\u00a0end.</strong></p>\n<pre>import webbrowser<br>import time<br>import math<br># importing webdriver from selenium <br>from selenium import webdriver<br>from selenium.webdriver.common.keys import Keys<br>from selenium.webdriver.chrome.options import Options<br>from selenium.webdriver.common.by import By<br>from selenium.webdriver.support.ui import WebDriverWait<br>from selenium.webdriver.support import expected_conditions as EC<br>from selenium.common.exceptions import NoSuchElementException<br>from selenium.common.exceptions import StaleElementReferenceException</pre>\n<pre>from pygame._sdl2 import get_num_audio_devices, get_audio_device_name #Get playback device names<br>from pygame import mixer #Playing sound</pre>\n<p>Import all the required libraries into your python\u00a0code.</p>\n<pre>url = \u2018<a href=\"https://accounts.google.com/signin/v2/identifier?ltmpl=meet&amp;continue=https%3A%2F%2Fmeet.google.com%3Fhs%3D193&amp;&amp;flowName=GlifWebSignIn&amp;flowEntry=ServiceLogin%27\">https://accounts.google.com/signin/v2/identifier?ltmpl=meet&amp;continue=https%3A%2F%2Fmeet.google.com%3Fhs%3D193&amp;&amp;flowName=GlifWebSignIn&amp;flowEntry=ServiceLogin'</a></pre>\n<pre># Here Chrome will be used</pre>\n<pre>chrome_options = Options()</pre>\n<pre>#chrome_options.add_argument(\u2018use-fake-device-for-media-stream\u2019)</pre>\n<pre>chrome_options.add_argument(\u2018use-fake-ui-for-media-stream\u2019)</pre>\n<pre>chrome_options.add_argument(\u2018 \u2014 disable-notifications\u2019)</pre>\n<pre>driver=webdriver.Chrome(\u201cD://openlink_meet/chromedriver.exe\u201d,chrome_options=chrome_options)</pre>\n<p>The URL at the starting of the snippet is an URL to the sign-in page of google meet.This URL is fed to chromedriver with provided chrome\u00a0options.</p>\n<p>The 3 chrome options provided to the chrome driver ensures that some specific permissions are allowed on\u00a0chrome.</p>\n<p>Finally, at the end of the snippet add the path of the chromedriver that you installed to webdriver.Chrome(\u201chere\u201d)</p>\n<pre># Opening the website <br>driver.get(url) <br><br># getting the button by class name <br>SignIn = driver.find_element_by_id(\"identifierId\")  </pre>\n<pre># clicking on the button SignIn.send_keys(\"your email here\")<br>SignIn.send_keys(Keys.ENTER) <br>driver.implicitly_wait(10) </pre>\n<pre>EnterPass =driver.find_element_by_xpath(\"//*[@id='password']/div[1]/div/div[1]/input\")<br>EnterPass.send_keys(\"your password here\")<br>EnterPass.send_keys(Keys.ENTER)EnterCode=driver.find_element_by_xpath(\"//*[@id='i3']\")</pre>\n<pre>EnterCode.send_keys(\"Enter the meet code here\")</pre>\n<pre>JoinLink=driver.find_element_by_xpath(\"/html/body/cwiz/div/div[2]/div/div[1]/div[3]/div/div[2]/div[2]/button/span\") <br>JoinLink.click()</pre>\n<p>driver.get function loads the URL provided in the argument in a new chrome tab. SignIn is used to enter your email into the text field. Enter your email id in the argument of SignIn.send_keys function. Similarly, Enter your password in the argument of EnterPass.send_keys function. Again, Enter your meeting code in the argument of EnterCode.send_keys funciton.</p>\n<p>Here find_element_by_path function takes in the XPath of any element on the web page as input and loads it for you. implicitly_wait function makes the web driver wait(do nothing) for a given seconds to load some elements on the\u00a0webpage</p>\n<p>Tip: To get XPath of any element on a webpage right click on that element on your chrome browser and click inspect-&gt; Right-click on the highlighted definition of that element in the inspect section-&gt;copy-&gt;copy full\u00a0XPath.</p>\n<pre>ignored_exceptions=(NoSuchElementException,StaleElementReferenceException)</pre>\n<pre>Mute = driver.find_element_by_xpath(\u201c//*[<a href=\"http://twitter.com/id\">@id</a>=\u2019yDmH0d\u2019]/c-wiz/div/div/div[9]/div[3]/div/div/div[4]/div/div/div[1]/div[1]/div/div[4]/div[1]/div/div/div\u201d)<br>Mute.click()</pre>\n<pre>CamOff = driver.find_element_by_xpath(\u201c/html/body/div/c-wiz/div/div/div[9]/div[3]/div/div/div[4]/div/div/div[1]/div[1]/div/div[4]/div[2]/div/div\u201d)<br>CamOff.click()</pre>\n<pre>JoinNow=WebDriverWait(driver,10,ignored_exceptions=ignored_exceptions).until(EC.element_to_be_clickable((By.XPATH, \u201c/html/body/div[1]/c-wiz/div/div/div[9]/div[3]/div/div/div[4]/div/div/div[2]/div/div[2]/div/div[1]/div[1]/span/span\u201d)))<br>JoinNow.click()</pre>\n<p>Ignored exceptions is a tuple of exceptions that code occurs while runtime. Again mute button and camera off button is located by XPath and then clicked using the\u00a0.click() function. The last line of the snippet defines the join now button which joins the meeting. As it takes time for this button to load, an explicit driver wait is provided with given exceptions. It waits until the element is clickable or the time(here 10 secs) runs\u00a0out.</p>\n<pre>TurnOnCaptions = driver.find_element_by_xpath(\u201c/html/body/div[1]/c-wiz/div[1]/div/div[9]/div[3]/div[10]/div[2]/div/div[3]/div/span/button/span[2]\u201d)<br>TurnOnCaptions.click()</pre>\n<pre>students=WebDriverWait(driver,20,ignored_exceptions=ignored_exceptions).until(EC.element_to_be_clickable((By.XPATH, \u201c/html/body/div[1]/c-wiz/div[1]/div/div[9]/div[3]/div[10]/div[3]/div[2]/div/div/div[2]/div/div\u201d)))</pre>\n<pre>text = students.text<br>Total_numStudents = int(text)<br>print(Total_numStudents)</pre>\n<pre>Caption_tray=WebDriverWait(driver,100,ignored_exceptions=ignored_exceptions).until(EC.presence_of_element_located((By.XPATH, \u201c/html/body/div[1]/c-wiz/div[1]/div/div[9]/div[3]/div[7]/div\u201d)))</pre>\n<pre>Captions=WebDriverWait(driver,100,ignored_exceptions=ignored_exceptions).until(EC.presence_of_element_located((By.XPATH,\u201d/html/body/div[1]/cwiz/div[1]/div/div[9]/div[3]/div[7]/div/div[2]/div/span/span\u201d)))</pre>\n<pre>count = 0</pre>\n<p>Further, we need to turn the captions on to read and analyze them.TurnOnCaptions does the same for us. students variable keeps the track of the number of people present in the meeting which is afterwards used to end the meeting if a lot of people are leaving the\u00a0meet.</p>\n<p>Caption_tray is the tray holding all the captions that we need to transcribe.Caption_tray and caption again are located by their\u00a0XPath.</p>\n<pre>staleElement = True</pre>\n<pre>while staleElement :</pre>\n<pre>try :</pre>\n<pre>Caption_tray = driver.find_element_by_xpath(\u201c/html/body/div[1]/c-wiz/div[1]/div/div[9]/div[3]/div[7]/div\u201d)</pre>\n<pre>Captions = driver.find_element_by_xpath(\u201c/html/body/div[1]/c-wiz/div[1]/div/div[9]/div[3]/div[7]/div/div[2]/div\u201d)</pre>\n<pre>if Captions.is_displayed() :</pre>\n<pre>Caption_text= Captions.text<br>Caption_text = Caption_text.lower()<br>print(Caption_text)</pre>\n<pre>except(StaleElementReferenceException):<br>staleElement = True</pre>\n<pre>except(NoSuchElementException) :<br>staleElement = True</pre>\n<p>This snippet continuously extracts the text from the captions tray into the python terminal. If your name, roll number, etc is displayed in this text you can analyze it and further play a recorded voice once the above event\u00a0occurs.</p>\n<pre>changed_numstudents = int(students.text)<br>print(changed_numstudents)</pre>\n<pre>if changed_numstudents &gt; Total_numStudents :<br>Total_numStudents = changed_numstudents</pre>\n<pre>elif changed_numstudents &lt; Total_numStudents :</pre>\n<pre>if changed_numstudents &lt;=math.floor(0.2*Total_numStudents):<br>EndCall=driver.find_element_by_xpath(\u201c/html/body/div[1]/c-wiz/div[1]/div/div[9]/div[3]/div[10]/div[2]/div/div[7]/span/button/i\u201d)<br>EndCall.click()</pre>\n<p>This is an algorithm that ends the call automatically for you if a lot of people are leaving the meet. EndCall variables define the End call button on the\u00a0webpage.</p>\n<pre>if count ==0 :</pre>\n<pre>words = (\u201croll number 22\u201d, \u201cJondoe\u201d , \u201cJohndoe\u201d , \u201cJon Doe\u201d ,\u201dJune Doe\u201d , \u201cJon\u201d )</pre>\n<pre>if any(name in Caption_text for name in words): </pre>\n<pre>UnMute = driver.find_element_by_xpath(\u201c/html/body/div[1]/c-wiz/div[1]/div/div[9]/div[3]/div[10]/div[2]/div/div[1]/div/div/span/button/div[2]\u201d)<br>UnMute.click()<br>mixer.init(devicename=\u2019CABLE Input (VB-Audio Virtual Cable)\u2019) mixer.music.load(\u201cEnter path of your voice recording here\u201d) mixer.music.play()<br>time.sleep(4)<br>mixer.music.stop()<br>UnMute.click()<br>count+=1</pre>\n<p>Now we check if your name or roll number has been displayed in the captions. Add your name and different combinations of how it is misspelt by text-to-speech into the words tuple at the start. If true, Unmute button is clicked and audio is played by pygame mixer. And the mic is again\u00a0muted.</p>\n<p>Enter the path of your recorded voice mp3 file into the argument of mixer.music.load(\u201chere\u201d).</p>\n<p>Step 3: Installing and setting up VB-Audio Virtual\u00a0Cable</p>\n<p><a href=\"https://vb-audio.com/Cable/\"><strong>VB-Audio Virtual\u00a0Apps</strong></a></p>\n<p><a href=\"https://vb-audio.com/Cable/\">https://vb-audio.com/Cable</a></p>\n<p>Download and install VB-Audio Virtual Cable from the above\u00a0link.</p>\n<p>VB-CABLE is a virtual audio device working as a virtual audio cable. All audio coming in the CABLE input is simply forwarded to the CABLE output. It helps us to play the recorded voice file stored locally on your device to the microphone.</p>\n<p>To set up VB-Audio Virtual Cable install the setup normally and reboot your device.Now you need select VB-Audio as your microphone device. To do this search for Change System Sounds on your windows search bar.The following dialogue box will appear after clicking\u00a0it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/459/1*z6Bt06g2JyyXZwNdcVrdUA.png\"></figure><p>Go to the recording tab, find CABLE Output in the list, click and set default this\u00a0device.</p>\n<p>Note: VB-audio virtual cable links your PC\u2019s speaker output virtually to your microphone. <strong>So remember to change the default microphone to your microphone device when in a call where you\u2019re expected to\u00a0speak.</strong></p>\n<p>Step 4: Creating a batch file for running our python application.</p>\n<pre>python D:\\openlink_meet\\openlink_meet_CV.py<br>pause</pre>\n<p>Open notepad and type the above snippet into it. And save the file as\u00a0.bat extension. Now you can launch the python program just by clicking this batch\u00a0file.</p>\n<p>Step 5: Scheduling the batch file at a specific time(start of the meeting) using windows task scheduler.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mL_XNeB8XvTLtdxYAmaDqQ.png\"></figure><p>Search and click task scheduler in the windows search bar. On the right, you can see the create task option. Provide the path of the batch file that we created in new options of the actions tab. Define the time of meeting in the triggers tab. You can define multiple triggers\u00a0too!</p>\n<p>Now your meeting will be automatically launched at the specified time and attend the whole meeting for you. It\u2019ll mark you present and also end the meeting when most of the people have left the\u00a0meet.</p>\n<p>Checkout my GitHub\u00a0repo:</p>\n<p><a href=\"https://github.com/Wadi-Sarvesh/Google-meet-self-attendance-bot\">GitHub - Wadi-Sarvesh/Google-meet-self-attendance-bot: An attendance bot which joins google meet automatically according to schedule and marks present in the google meet.</a></p>\n<p>Please like and share my post on LinkedIn (Demonstration of the\u00a0project)</p>\n<p>LinkedIn link\u00a0:</p>\n<p><a href=\"https://www.linkedin.com/posts/sarvesh-wadi-546531186_programming-python-coding-activity-6721649520037371904-FhGh\">Sarvesh Wadi on LinkedIn: #programming #python #coding | 135 comments</a></p>\n<p>Thankyou\u00a0!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a62978bb06f6\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/analytics-vidhya/google-meet-self-attendance-bot-sarvesh-wadi-a62978bb06f6\">Google Meet Self Attendance Bot ~Sarvesh Wadi</a> was originally published in <a href=\"https://medium.com/analytics-vidhya\">Analytics Vidhya</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*3SE2pe1oF1EMzVS-.png\"></figure><p>I have been missing my morning online lectures lately because of this irregular sleep cycle and procrastination. So I came up with this innovative idea of developing a python program that will automatically open the meet link for me and join the lecture using my account credentials.</p>\n<p>Moreover, I added a versatile feature to this project, making this project totally self-acting in handling the Google Meetings web page. I have developed a program that will answer as \u201cPresent\u201d through the Microphone of the laptop whenever the teacher takes your name. Pygame, selenium and chrome driver are used in this project. In this tutorial, I\u2018ll walk you through the project step by step to create your own Google Meet Attendance bot.</p>\n<p>Step 1: Installing required Softwares</p>\n<p>Run the following commands on your command prompt to install selenium and\u00a0pygame.</p>\n<pre>pip install selenium</pre>\n<pre>pip install pygame==2.0.0.dev8</pre>\n<p>Selenium supports all major browsers on the market such as Chromium, Firefox, Internet Explorer, Opera, and Safari. WebDriver aims to emulate a real user\u2019s interaction with the browser as closely as possible. This is possible at varying levels in different browsers. Pygame is used to play and process mp3\u00a0files.</p>\n<p>In this project, I have used Chrome Driver as the WebDriver to automate tasks that are to be performed on\u00a0Chrome.</p>\n<p>Download the latest chromedriver that matches with your version of\u00a0chrome.</p>\n<p><a href=\"https://chromedriver.chromium.org/downloads\">https://chromedriver.chromium.org/downloads</a></p>\n<p>If you\u2019re using firefox, Microsoft edge or any other application, you can download driver for your application accordingly</p>\n<p>Step 2: Writing Python code for web automation.</p>\n<p><strong>Note: The indentations provided in the snippets are improper. You can refer to the link for the GitHub repo at the\u00a0end.</strong></p>\n<pre>import webbrowser<br>import time<br>import math<br># importing webdriver from selenium <br>from selenium import webdriver<br>from selenium.webdriver.common.keys import Keys<br>from selenium.webdriver.chrome.options import Options<br>from selenium.webdriver.common.by import By<br>from selenium.webdriver.support.ui import WebDriverWait<br>from selenium.webdriver.support import expected_conditions as EC<br>from selenium.common.exceptions import NoSuchElementException<br>from selenium.common.exceptions import StaleElementReferenceException</pre>\n<pre>from pygame._sdl2 import get_num_audio_devices, get_audio_device_name #Get playback device names<br>from pygame import mixer #Playing sound</pre>\n<p>Import all the required libraries into your python\u00a0code.</p>\n<pre>url = \u2018<a href=\"https://accounts.google.com/signin/v2/identifier?ltmpl=meet&amp;continue=https%3A%2F%2Fmeet.google.com%3Fhs%3D193&amp;&amp;flowName=GlifWebSignIn&amp;flowEntry=ServiceLogin%27\">https://accounts.google.com/signin/v2/identifier?ltmpl=meet&amp;continue=https%3A%2F%2Fmeet.google.com%3Fhs%3D193&amp;&amp;flowName=GlifWebSignIn&amp;flowEntry=ServiceLogin'</a></pre>\n<pre># Here Chrome will be used</pre>\n<pre>chrome_options = Options()</pre>\n<pre>#chrome_options.add_argument(\u2018use-fake-device-for-media-stream\u2019)</pre>\n<pre>chrome_options.add_argument(\u2018use-fake-ui-for-media-stream\u2019)</pre>\n<pre>chrome_options.add_argument(\u2018 \u2014 disable-notifications\u2019)</pre>\n<pre>driver=webdriver.Chrome(\u201cD://openlink_meet/chromedriver.exe\u201d,chrome_options=chrome_options)</pre>\n<p>The URL at the starting of the snippet is an URL to the sign-in page of google meet.This URL is fed to chromedriver with provided chrome\u00a0options.</p>\n<p>The 3 chrome options provided to the chrome driver ensures that some specific permissions are allowed on\u00a0chrome.</p>\n<p>Finally, at the end of the snippet add the path of the chromedriver that you installed to webdriver.Chrome(\u201chere\u201d)</p>\n<pre># Opening the website <br>driver.get(url) <br><br># getting the button by class name <br>SignIn = driver.find_element_by_id(\"identifierId\")  </pre>\n<pre># clicking on the button SignIn.send_keys(\"your email here\")<br>SignIn.send_keys(Keys.ENTER) <br>driver.implicitly_wait(10) </pre>\n<pre>EnterPass =driver.find_element_by_xpath(\"//*[@id='password']/div[1]/div/div[1]/input\")<br>EnterPass.send_keys(\"your password here\")<br>EnterPass.send_keys(Keys.ENTER)EnterCode=driver.find_element_by_xpath(\"//*[@id='i3']\")</pre>\n<pre>EnterCode.send_keys(\"Enter the meet code here\")</pre>\n<pre>JoinLink=driver.find_element_by_xpath(\"/html/body/cwiz/div/div[2]/div/div[1]/div[3]/div/div[2]/div[2]/button/span\") <br>JoinLink.click()</pre>\n<p>driver.get function loads the URL provided in the argument in a new chrome tab. SignIn is used to enter your email into the text field. Enter your email id in the argument of SignIn.send_keys function. Similarly, Enter your password in the argument of EnterPass.send_keys function. Again, Enter your meeting code in the argument of EnterCode.send_keys funciton.</p>\n<p>Here find_element_by_path function takes in the XPath of any element on the web page as input and loads it for you. implicitly_wait function makes the web driver wait(do nothing) for a given seconds to load some elements on the\u00a0webpage</p>\n<p>Tip: To get XPath of any element on a webpage right click on that element on your chrome browser and click inspect-&gt; Right-click on the highlighted definition of that element in the inspect section-&gt;copy-&gt;copy full\u00a0XPath.</p>\n<pre>ignored_exceptions=(NoSuchElementException,StaleElementReferenceException)</pre>\n<pre>Mute = driver.find_element_by_xpath(\u201c//*[<a href=\"http://twitter.com/id\">@id</a>=\u2019yDmH0d\u2019]/c-wiz/div/div/div[9]/div[3]/div/div/div[4]/div/div/div[1]/div[1]/div/div[4]/div[1]/div/div/div\u201d)<br>Mute.click()</pre>\n<pre>CamOff = driver.find_element_by_xpath(\u201c/html/body/div/c-wiz/div/div/div[9]/div[3]/div/div/div[4]/div/div/div[1]/div[1]/div/div[4]/div[2]/div/div\u201d)<br>CamOff.click()</pre>\n<pre>JoinNow=WebDriverWait(driver,10,ignored_exceptions=ignored_exceptions).until(EC.element_to_be_clickable((By.XPATH, \u201c/html/body/div[1]/c-wiz/div/div/div[9]/div[3]/div/div/div[4]/div/div/div[2]/div/div[2]/div/div[1]/div[1]/span/span\u201d)))<br>JoinNow.click()</pre>\n<p>Ignored exceptions is a tuple of exceptions that code occurs while runtime. Again mute button and camera off button is located by XPath and then clicked using the\u00a0.click() function. The last line of the snippet defines the join now button which joins the meeting. As it takes time for this button to load, an explicit driver wait is provided with given exceptions. It waits until the element is clickable or the time(here 10 secs) runs\u00a0out.</p>\n<pre>TurnOnCaptions = driver.find_element_by_xpath(\u201c/html/body/div[1]/c-wiz/div[1]/div/div[9]/div[3]/div[10]/div[2]/div/div[3]/div/span/button/span[2]\u201d)<br>TurnOnCaptions.click()</pre>\n<pre>students=WebDriverWait(driver,20,ignored_exceptions=ignored_exceptions).until(EC.element_to_be_clickable((By.XPATH, \u201c/html/body/div[1]/c-wiz/div[1]/div/div[9]/div[3]/div[10]/div[3]/div[2]/div/div/div[2]/div/div\u201d)))</pre>\n<pre>text = students.text<br>Total_numStudents = int(text)<br>print(Total_numStudents)</pre>\n<pre>Caption_tray=WebDriverWait(driver,100,ignored_exceptions=ignored_exceptions).until(EC.presence_of_element_located((By.XPATH, \u201c/html/body/div[1]/c-wiz/div[1]/div/div[9]/div[3]/div[7]/div\u201d)))</pre>\n<pre>Captions=WebDriverWait(driver,100,ignored_exceptions=ignored_exceptions).until(EC.presence_of_element_located((By.XPATH,\u201d/html/body/div[1]/cwiz/div[1]/div/div[9]/div[3]/div[7]/div/div[2]/div/span/span\u201d)))</pre>\n<pre>count = 0</pre>\n<p>Further, we need to turn the captions on to read and analyze them.TurnOnCaptions does the same for us. students variable keeps the track of the number of people present in the meeting which is afterwards used to end the meeting if a lot of people are leaving the\u00a0meet.</p>\n<p>Caption_tray is the tray holding all the captions that we need to transcribe.Caption_tray and caption again are located by their\u00a0XPath.</p>\n<pre>staleElement = True</pre>\n<pre>while staleElement :</pre>\n<pre>try :</pre>\n<pre>Caption_tray = driver.find_element_by_xpath(\u201c/html/body/div[1]/c-wiz/div[1]/div/div[9]/div[3]/div[7]/div\u201d)</pre>\n<pre>Captions = driver.find_element_by_xpath(\u201c/html/body/div[1]/c-wiz/div[1]/div/div[9]/div[3]/div[7]/div/div[2]/div\u201d)</pre>\n<pre>if Captions.is_displayed() :</pre>\n<pre>Caption_text= Captions.text<br>Caption_text = Caption_text.lower()<br>print(Caption_text)</pre>\n<pre>except(StaleElementReferenceException):<br>staleElement = True</pre>\n<pre>except(NoSuchElementException) :<br>staleElement = True</pre>\n<p>This snippet continuously extracts the text from the captions tray into the python terminal. If your name, roll number, etc is displayed in this text you can analyze it and further play a recorded voice once the above event\u00a0occurs.</p>\n<pre>changed_numstudents = int(students.text)<br>print(changed_numstudents)</pre>\n<pre>if changed_numstudents &gt; Total_numStudents :<br>Total_numStudents = changed_numstudents</pre>\n<pre>elif changed_numstudents &lt; Total_numStudents :</pre>\n<pre>if changed_numstudents &lt;=math.floor(0.2*Total_numStudents):<br>EndCall=driver.find_element_by_xpath(\u201c/html/body/div[1]/c-wiz/div[1]/div/div[9]/div[3]/div[10]/div[2]/div/div[7]/span/button/i\u201d)<br>EndCall.click()</pre>\n<p>This is an algorithm that ends the call automatically for you if a lot of people are leaving the meet. EndCall variables define the End call button on the\u00a0webpage.</p>\n<pre>if count ==0 :</pre>\n<pre>words = (\u201croll number 22\u201d, \u201cJondoe\u201d , \u201cJohndoe\u201d , \u201cJon Doe\u201d ,\u201dJune Doe\u201d , \u201cJon\u201d )</pre>\n<pre>if any(name in Caption_text for name in words): </pre>\n<pre>UnMute = driver.find_element_by_xpath(\u201c/html/body/div[1]/c-wiz/div[1]/div/div[9]/div[3]/div[10]/div[2]/div/div[1]/div/div/span/button/div[2]\u201d)<br>UnMute.click()<br>mixer.init(devicename=\u2019CABLE Input (VB-Audio Virtual Cable)\u2019) mixer.music.load(\u201cEnter path of your voice recording here\u201d) mixer.music.play()<br>time.sleep(4)<br>mixer.music.stop()<br>UnMute.click()<br>count+=1</pre>\n<p>Now we check if your name or roll number has been displayed in the captions. Add your name and different combinations of how it is misspelt by text-to-speech into the words tuple at the start. If true, Unmute button is clicked and audio is played by pygame mixer. And the mic is again\u00a0muted.</p>\n<p>Enter the path of your recorded voice mp3 file into the argument of mixer.music.load(\u201chere\u201d).</p>\n<p>Step 3: Installing and setting up VB-Audio Virtual\u00a0Cable</p>\n<p><a href=\"https://vb-audio.com/Cable/\"><strong>VB-Audio Virtual\u00a0Apps</strong></a></p>\n<p><a href=\"https://vb-audio.com/Cable/\">https://vb-audio.com/Cable</a></p>\n<p>Download and install VB-Audio Virtual Cable from the above\u00a0link.</p>\n<p>VB-CABLE is a virtual audio device working as a virtual audio cable. All audio coming in the CABLE input is simply forwarded to the CABLE output. It helps us to play the recorded voice file stored locally on your device to the microphone.</p>\n<p>To set up VB-Audio Virtual Cable install the setup normally and reboot your device.Now you need select VB-Audio as your microphone device. To do this search for Change System Sounds on your windows search bar.The following dialogue box will appear after clicking\u00a0it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/459/1*z6Bt06g2JyyXZwNdcVrdUA.png\"></figure><p>Go to the recording tab, find CABLE Output in the list, click and set default this\u00a0device.</p>\n<p>Note: VB-audio virtual cable links your PC\u2019s speaker output virtually to your microphone. <strong>So remember to change the default microphone to your microphone device when in a call where you\u2019re expected to\u00a0speak.</strong></p>\n<p>Step 4: Creating a batch file for running our python application.</p>\n<pre>python D:\\openlink_meet\\openlink_meet_CV.py<br>pause</pre>\n<p>Open notepad and type the above snippet into it. And save the file as\u00a0.bat extension. Now you can launch the python program just by clicking this batch\u00a0file.</p>\n<p>Step 5: Scheduling the batch file at a specific time(start of the meeting) using windows task scheduler.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mL_XNeB8XvTLtdxYAmaDqQ.png\"></figure><p>Search and click task scheduler in the windows search bar. On the right, you can see the create task option. Provide the path of the batch file that we created in new options of the actions tab. Define the time of meeting in the triggers tab. You can define multiple triggers\u00a0too!</p>\n<p>Now your meeting will be automatically launched at the specified time and attend the whole meeting for you. It\u2019ll mark you present and also end the meeting when most of the people have left the\u00a0meet.</p>\n<p>Checkout my GitHub\u00a0repo:</p>\n<p><a href=\"https://github.com/Wadi-Sarvesh/Google-meet-self-attendance-bot\">GitHub - Wadi-Sarvesh/Google-meet-self-attendance-bot: An attendance bot which joins google meet automatically according to schedule and marks present in the google meet.</a></p>\n<p>Please like and share my post on LinkedIn (Demonstration of the\u00a0project)</p>\n<p>LinkedIn link\u00a0:</p>\n<p><a href=\"https://www.linkedin.com/posts/sarvesh-wadi-546531186_programming-python-coding-activity-6721649520037371904-FhGh\">Sarvesh Wadi on LinkedIn: #programming #python #coding | 135 comments</a></p>\n<p>Thankyou\u00a0!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a62978bb06f6\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/analytics-vidhya/google-meet-self-attendance-bot-sarvesh-wadi-a62978bb06f6\">Google Meet Self Attendance Bot ~Sarvesh Wadi</a> was originally published in <a href=\"https://medium.com/analytics-vidhya\">Analytics Vidhya</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":[]}]}